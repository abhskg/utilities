import os
import shutil
import logging

# Configure logging
logging.basicConfig(
    filename='cleanup.log',
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

def cleanup_node_modules(base_path):
    """
    Recursively traverses directories from the given path and removes redundant node_modules directories.
    
    Args:
        base_path (str): The starting directory path to begin the cleanup.
    """
    for root, dirs, files in os.walk(base_path):
        if 'node_modules' in dirs:
            node_modules_path = os.path.join(root, 'node_modules')
            try:
                print(f"Removing: {node_modules_path}")
                shutil.rmtree(node_modules_path)
                logging.info(f"Successfully removed: {node_modules_path}")
            except Exception as e:
                print(f"Failed to remove {node_modules_path}: {e}")
                logging.error(f"Failed to remove {node_modules_path}: {e}")

def cleanup_build_files(base_path):
    """
    Recursively traverses directories from the given path and removes build-related directories.
    
    Args:
        base_path (str): The starting directory path to begin the cleanup.
    """
    build_dirs = ['dist', 'build']
    for root, dirs, files in os.walk(base_path):
        for build_dir in build_dirs:
            if build_dir in dirs:
                build_dir_path = os.path.join(root, build_dir)
                try:
                    print(f"Removing: {build_dir_path}")
                    shutil.rmtree(build_dir_path)
                    logging.info(f"Successfully removed: {build_dir_path}")
                except Exception as e:
                    print(f"Failed to remove {build_dir_path}: {e}")
                    logging.error(f"Failed to remove {build_dir_path}: {e}")
        for dir_name in dirs:
            if dir_name.endswith('.egg-info'):
                egg_info_path = os.path.join(root, dir_name)
                try:
                    print(f"Removing: {egg_info_path}")
                    shutil.rmtree(egg_info_path)
                    logging.info(f"Successfully removed: {egg_info_path}")
                except Exception as e:
                    print(f"Failed to remove {egg_info_path}: {e}")
                    logging.error(f"Failed to remove {egg_info_path}: {e}")

def cleanup_spring_project_files(base_path):
    """
    Recursively traverses directories from the given path and removes Java Spring project-related directories.
    
    Args:
        base_path (str): The starting directory path to begin the cleanup.
    """
    for root, dirs, files in os.walk(base_path):
        if 'target' in dirs:
            target_path = os.path.join(root, 'target')
            try:
                print(f"Removing: {target_path}")
                shutil.rmtree(target_path)
                logging.info(f"Successfully removed: {target_path}")
            except Exception as e:
                print(f"Failed to remove {target_path}: {e}")
                logging.error(f"Failed to remove {target_path}: {e}")

if __name__ == "__main__":
    # Prompt the user for the base path
    base_path = input("Enter the path to start cleanup: ").strip()
    
    if os.path.exists(base_path) and os.path.isdir(base_path):
        cleanup_node_modules(base_path)
        cleanup_build_files(base_path)
        cleanup_spring_project_files(base_path)
        print("Cleanup completed. Check cleanup.log for details.")
        logging.info("Cleanup completed successfully.")
    else:
        print("Invalid path. Please provide a valid directory path.")
        logging.error("Invalid path provided.")